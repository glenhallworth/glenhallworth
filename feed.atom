<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
	<link rel="self" href="https://glenhallworth.com/" />
	<id>https://glenhallworth.com/</id>
	<title>Glen Hallworth</title>
	<rights>2018</rights>
	<updated>2018-07-02T01:50:14Z</updated>
	<subtitle>Welcome!</subtitle>
	<entry>
		<link href="https://glenhallworth.com/posts/Retrieving-EsriArcGIS-Maps-Token-in-Dotnet-Core" />
		<id>https://glenhallworth.com/posts/Retrieving-EsriArcGIS-Maps-Token-in-Dotnet-Core</id>
		<title>Retrieving Esri/ArcGIS Maps Token in Dotnet Core</title>
		<updated>2017-12-18T00:00:00Z</updated>
		<content>&lt;p&gt;&lt;a href="http://www.esri.com/data/streetmap"&gt;Esri&lt;/a&gt; has a premium service which requires adding a token to REST API requests for services like batch geocoding. The service has a few gotchas. The sample code is:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;    public class EsriTokenResponse
    {
        [JsonProperty(PropertyName = &amp;quot;access_token&amp;quot;)]
        public string AccessToken { get; set; }
        [JsonProperty(PropertyName = &amp;quot;expires_in&amp;quot;)]
        public int ExpiresInMinutes { get; set; }
    }

    public class EsriClient
    {
        private readonly HttpClient _httpClient;
        private readonly string tokenUrl = &amp;quot;https://www.arcgis.com/sharing/rest/oauth2/token&amp;quot;;
        private readonly string clientId = &amp;quot;add_client_id&amp;quot;; // update
        private readonly string clientSecret = &amp;quot;add_client_secret&amp;quot;; // update
        private readonly string grantType = &amp;quot;client_credentials&amp;quot;;
        private readonly int expirationInMinutes = 120;

        public EsriClient(HttpClient httpClient)
        {
            _httpClient = httpClient;
        }
        public async Task&amp;lt;EsriTokenResponse&amp;gt; GetToken()
        {
            var url =
                $&amp;quot;{tokenUrl}?client_id={clientId}&amp;amp;client_secret={clientSecret}&amp;amp;grant_type={grantType}&amp;amp;expiration={ExpirationInMinutes}&amp;quot;;
            var response = await _httpClient.PostAsync(url, null);
            var result =
                await response.Content.ReadAsStringAsync();
            var token = JsonConvert.DeserializeObject&amp;lt;EsriTokenResponse&amp;gt;(result);
            if (string.IsNullOrWhiteSpace(token.AccessToken)) // Esri does not respect HTTP status codes and will always return 200. It puts errors in the body.
            {
                throw new Exception(&amp;quot;Could not retrieve Esri Token&amp;quot;);
            }
            return token;
        }
    }
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id="gotchas"&gt;Gotchas&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://developers.arcgis.com/documentation/core-concepts/rest-api/"&gt;ArcGIS&lt;/a&gt; has a REST-like API. It doesn't adhere strictly to REST best practices.&lt;/p&gt;
&lt;p&gt;When retrieving the token, I did not expect to put all the parameters into the query string.&lt;/p&gt;
&lt;p&gt;Error handling is more laborious than need be, it always returns HTTP 200 OK. For example, in the case of a bad request, the error details are in the body.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-javascript"&gt;{
    &amp;quot;error&amp;quot;: {
        &amp;quot;code&amp;quot;: 400,
        &amp;quot;error&amp;quot;: &amp;quot;invalid_client_id&amp;quot;,
        &amp;quot;error_description&amp;quot;: &amp;quot;Invalid client_id&amp;quot;,
        &amp;quot;message&amp;quot;: &amp;quot;Invalid client_id&amp;quot;,
        &amp;quot;details&amp;quot;: []
    }
}
&lt;/code&gt;&lt;/pre&gt;
</content>
		<summary>&lt;p&gt;&lt;a href="http://www.esri.com/data/streetmap"&gt;Esri&lt;/a&gt; has a premium service which requires adding a token to REST API requests for services like batch geocoding. The service has a few gotchas. The sample code is:&lt;/p&gt;</summary>
	</entry>
	<entry>
		<link href="https://glenhallworth.com/posts/Dotnet-Core-Templates-To-Hit-The-Ground-Running" />
		<id>https://glenhallworth.com/posts/Dotnet-Core-Templates-To-Hit-The-Ground-Running</id>
		<title>Dotnet Core Templates To Hit The Ground Running</title>
		<updated>2017-11-17T00:00:00Z</updated>
		<content>&lt;p&gt;The problem with starting a new project is there is a lot of boilerplate work to get started. You need to setup project structure, source control, build and release pipelines, dependency injection and logging before you write a line of business code. Dotnet Core 2.0 supports custom templates meaningless boilerplate code to hit the ground running.&lt;/p&gt;
&lt;p&gt;To test creating custom templates I built one for a common app type - C# Web API backend for a single page application. It can be found &lt;a href="https://github.com/glenhallworth/WebApiWithSpa."&gt;https://github.com/glenhallworth/WebApiWithSpa.&lt;/a&gt; I've made it generic including several libraries setup how I like and have left the flexible pieces to be added; such as authentication.&lt;/p&gt;
&lt;p&gt;The templates are distributed using NuGet so it's incredibly easy to use. To get the above template up and running its just two commands:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Install the template from NuGet: dotnet new -i WebApiWithSpa.Template.CSharp&lt;/li&gt;
&lt;li&gt;Create the project: dotnet new WebApiWithSpa&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;There is not much to the template, the above template only has three parts to it.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;A nuspec file to create a NuGet package.&lt;/li&gt;
&lt;li&gt;A template.json file to config the template.&lt;/li&gt;
&lt;li&gt;The template code files.&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;/
  WebApiWithSpa.nuspec - The nuspec file to pack the NuGet package.
  content/
    .template.config/ - A folder for template configuration.
      template.json - The template configuration.
    WebApiWithSpa/ - The code to use for the project.
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This saves me time setting up new projects as the template has already been setup with all the common aspects for projects of this type. There are always tasks at the beginning of the project which are set and forget - logging being an example.&lt;/p&gt;
&lt;p&gt;The project contains the boilerplate structure of the project:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;Domain Layer&lt;/em&gt; - The core business logic of an application. Includes IQuery and ICommand interfaces to support CQRS pattern.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Web API Layer&lt;/em&gt; - The API of the application. Has a sample Values controller supporting example CRUD operations. Also has logging with Serilog and static file serving is setup.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Code Gen&lt;/em&gt; - A console application to generate typescript interfaces for the API request/response objects. Makes writing the SPA easier by automating the creation of the API contract. This builds every time the Web API layer builds.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Unit Tests&lt;/em&gt; - A project for unit tests as every project should have unit tests.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Furthermore, you can add optional content to the template to support toggling features on or off. As a future enhancement, I'll add optional authentication setup.&lt;/p&gt;
&lt;p&gt;If you create several .NET projects every year you should consider using templates to save yourself time lowering the barrier to beginning a new project. Incredibly useful if you or your company has a standard project structure and preferred toolset. Not only will you make your project setup quicker because it's so easy to share with other people can benefit from your template.&lt;/p&gt;
</content>
		<summary>&lt;p&gt;The problem with starting a new project is there is a lot of boilerplate work to get started. You need to setup project structure, source control, build and release pipelines, dependency injection and logging before you write a line of business code. Dotnet Core 2.0 supports custom templates meaningless boilerplate code to hit the ground running.&lt;/p&gt;</summary>
	</entry>
	<entry>
		<link href="https://glenhallworth.com/posts/How-to-save-a-webpage-as-PDF-file-using-Puppeteer.js" />
		<id>https://glenhallworth.com/posts/How-to-save-a-webpage-as-PDF-file-using-Puppeteer.js</id>
		<title>How to save a webpage as PDF file using Puppeteer.js</title>
		<updated>2017-10-06T00:00:00Z</updated>
		<content>&lt;pre&gt;&lt;code class="language-javascript"&gt;const puppeteer = require(&amp;quot;puppeteer&amp;quot;);

class Webpage {
  static async generatePDF(url) {
    const browser = await puppeteer.launch({ headless: true }); // Puppeteer can only generate pdf in headless mode.
    const page = await browser.newPage();
    await page.goto(url, {
      waitUntil: &amp;quot;networkidle&amp;quot;,
      networkIdleTimeout: 5000
    }); // Adjust network idle as required.
    const pdfConfig = {
      path: &amp;quot;url.pdf&amp;quot;, // Saves pdf to disk.
      format: &amp;quot;A4&amp;quot;,
      printBackground: true,
      margin: {
        // Word's default A4 margins
        top: &amp;quot;2.54cm&amp;quot;,
        bottom: &amp;quot;2.54cm&amp;quot;,
        left: &amp;quot;2.54cm&amp;quot;,
        right: &amp;quot;2.54cm&amp;quot;
      }
    };
    await page.emulateMedia(&amp;quot;screen&amp;quot;);
    const pdf = await page.pdf(pdfConfig); // Return the pdf buffer. Useful for saving the file not to disk.

    await browser.close();

    return pdf;
  }
}

(async () =&amp;gt; {
  const url =
    &amp;quot;https://ia601405.us.archive.org/18/items/alicesadventures19033gut/19033-h/19033-h.htm&amp;quot;;
  const buffer = await Webpage.generatePDF(url);
})();
&lt;/code&gt;&lt;/pre&gt;
</content>
	</entry>
	<entry>
		<link href="https://glenhallworth.com/posts/How-to-save-a-webpage-as-PDF-file-and-send-via-email-using-Puppeteer-and-Nodemailer.js" />
		<id>https://glenhallworth.com/posts/How-to-save-a-webpage-as-PDF-file-and-send-via-email-using-Puppeteer-and-Nodemailer.js</id>
		<title>How to save a webpage as PDF file and send via email using Puppeteer and Nodemailer.js</title>
		<updated>2017-10-06T00:00:00Z</updated>
		<content>&lt;pre&gt;&lt;code class="language-javascript"&gt;const puppeteer = require(&amp;quot;puppeteer&amp;quot;);
const nodemailer = require(&amp;quot;nodemailer&amp;quot;);

class Webpage {
  static async generatePDF(url) {
    const browser = await puppeteer.launch({ headless: true }); // Puppeteer can only generate pdf in headless mode.
    const page = await browser.newPage();
    await page.goto(url, {
      waitUntil: &amp;quot;networkidle&amp;quot;,
      networkIdleTimeout: 5000
    }); // Adjust network idle as required.
    const pdfConfig = {
      format: &amp;quot;A4&amp;quot;,
      printBackground: true,
      margin: {
        // Word's default A4 margins
        top: &amp;quot;2.54cm&amp;quot;,
        bottom: &amp;quot;2.54cm&amp;quot;,
        left: &amp;quot;2.54cm&amp;quot;,
        right: &amp;quot;2.54cm&amp;quot;
      }
    };
    await page.emulateMedia(&amp;quot;screen&amp;quot;);
    const pdf = await page.pdf(pdfConfig); // Return the pdf buffer. Useful for saving the file not to disk.

    await browser.close();

    return pdf;
  }
}

class Email {
  static sendEmail(to, subject, text, filename, fileContent) {
    const transporter = nodemailer.createTransport({
      host: &amp;quot;smtp.office365.com&amp;quot;,
      port: 587,
      secureConnection: true, // Used for Office 365
      tls: { ciphers: &amp;quot;SSLv3&amp;quot; }, // Used for Office 365
      auth: {
        user: &amp;quot;user&amp;quot;, // Update username
        pass: &amp;quot;pass&amp;quot; // Update password
      }
    });

    const mailOptions = {
      from: &amp;quot;from&amp;#64;email.com&amp;quot;, // Update from email
      to: to,
      subject: subject,
      text: text,
      attachments: [
        {
          filename: filename,
          content: fileContent
        }
      ]
    };

    transporter.sendMail(mailOptions, (error, info) =&amp;gt; {
      if (error) {
        return console.log(error);
      }

      console.log(&amp;quot;Message sent: %s&amp;quot;, info.messageId);
    });
  }
}

(async () =&amp;gt; {
  const url =
    &amp;quot;https://ia601405.us.archive.org/18/items/alicesadventures19033gut/19033-h/19033-h.htm&amp;quot;;
  const buffer = await Webpage.generatePDF(url);
  Email.sendEmail(
    &amp;quot;to&amp;#64;email.com&amp;quot;, // Update to email
    &amp;quot;Alice in Wonderland&amp;quot;,
    &amp;quot;I thought you might enjoy this book!&amp;quot;,
    &amp;quot;Alice in Wonderland.pdf&amp;quot;,
    buffer
  );
})();
&lt;/code&gt;&lt;/pre&gt;
</content>
	</entry>
</feed>