<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
	<link rel="self" href="https://glenhallworth.com/" />
	<id>https://glenhallworth.com/</id>
	<title>Glen Hallworth</title>
	<rights>2018</rights>
	<updated>2018-07-02T01:17:55Z</updated>
	<subtitle>Welcome!</subtitle>
	<entry>
		<link href="https://glenhallworth.com/posts/How-to-save-a-webpage-as-PDF-file-using-Puppeteer.js" />
		<id>https://glenhallworth.com/posts/How-to-save-a-webpage-as-PDF-file-using-Puppeteer.js</id>
		<title>How to save a webpage as PDF file using Puppeteer.js</title>
		<updated>2017-06-10T00:00:00Z</updated>
		<content>&lt;pre&gt;&lt;code class="language-javascript"&gt;const puppeteer = require(&amp;quot;puppeteer&amp;quot;);

class Webpage {
  static async generatePDF(url) {
    const browser = await puppeteer.launch({ headless: true }); // Puppeteer can only generate pdf in headless mode.
    const page = await browser.newPage();
    await page.goto(url, {
      waitUntil: &amp;quot;networkidle&amp;quot;,
      networkIdleTimeout: 5000
    }); // Adjust network idle as required.
    const pdfConfig = {
      path: &amp;quot;url.pdf&amp;quot;, // Saves pdf to disk.
      format: &amp;quot;A4&amp;quot;,
      printBackground: true,
      margin: {
        // Word's default A4 margins
        top: &amp;quot;2.54cm&amp;quot;,
        bottom: &amp;quot;2.54cm&amp;quot;,
        left: &amp;quot;2.54cm&amp;quot;,
        right: &amp;quot;2.54cm&amp;quot;
      }
    };
    await page.emulateMedia(&amp;quot;screen&amp;quot;);
    const pdf = await page.pdf(pdfConfig); // Return the pdf buffer. Useful for saving the file not to disk.

    await browser.close();

    return pdf;
  }
}

(async () =&amp;gt; {
  const url =
    &amp;quot;https://ia601405.us.archive.org/18/items/alicesadventures19033gut/19033-h/19033-h.htm&amp;quot;;
  const buffer = await Webpage.generatePDF(url);
})();
&lt;/code&gt;&lt;/pre&gt;
</content>
	</entry>
	<entry>
		<link href="https://glenhallworth.com/posts/How-to-save-a-webpage-as-PDF-file-and-send-via-email-using-Puppeteer-and-Nodemailer.js" />
		<id>https://glenhallworth.com/posts/How-to-save-a-webpage-as-PDF-file-and-send-via-email-using-Puppeteer-and-Nodemailer.js</id>
		<title>How to save a webpage as PDF file and send via email using Puppeteer and Nodemailer.js</title>
		<updated>2017-06-10T00:00:00Z</updated>
		<content>&lt;pre&gt;&lt;code class="language-javascript"&gt;const puppeteer = require(&amp;quot;puppeteer&amp;quot;);
const nodemailer = require(&amp;quot;nodemailer&amp;quot;);

class Webpage {
  static async generatePDF(url) {
    const browser = await puppeteer.launch({ headless: true }); // Puppeteer can only generate pdf in headless mode.
    const page = await browser.newPage();
    await page.goto(url, {
      waitUntil: &amp;quot;networkidle&amp;quot;,
      networkIdleTimeout: 5000
    }); // Adjust network idle as required.
    const pdfConfig = {
      format: &amp;quot;A4&amp;quot;,
      printBackground: true,
      margin: {
        // Word's default A4 margins
        top: &amp;quot;2.54cm&amp;quot;,
        bottom: &amp;quot;2.54cm&amp;quot;,
        left: &amp;quot;2.54cm&amp;quot;,
        right: &amp;quot;2.54cm&amp;quot;
      }
    };
    await page.emulateMedia(&amp;quot;screen&amp;quot;);
    const pdf = await page.pdf(pdfConfig); // Return the pdf buffer. Useful for saving the file not to disk.

    await browser.close();

    return pdf;
  }
}

class Email {
  static sendEmail(to, subject, text, filename, fileContent) {
    const transporter = nodemailer.createTransport({
      host: &amp;quot;smtp.office365.com&amp;quot;,
      port: 587,
      secureConnection: true, // Used for Office 365
      tls: { ciphers: &amp;quot;SSLv3&amp;quot; }, // Used for Office 365
      auth: {
        user: &amp;quot;user&amp;quot;, // Update username
        pass: &amp;quot;pass&amp;quot; // Update password
      }
    });

    const mailOptions = {
      from: &amp;quot;from&amp;#64;email.com&amp;quot;, // Update from email
      to: to,
      subject: subject,
      text: text,
      attachments: [
        {
          filename: filename,
          content: fileContent
        }
      ]
    };

    transporter.sendMail(mailOptions, (error, info) =&amp;gt; {
      if (error) {
        return console.log(error);
      }

      console.log(&amp;quot;Message sent: %s&amp;quot;, info.messageId);
    });
  }
}

(async () =&amp;gt; {
  const url =
    &amp;quot;https://ia601405.us.archive.org/18/items/alicesadventures19033gut/19033-h/19033-h.htm&amp;quot;;
  const buffer = await Webpage.generatePDF(url);
  Email.sendEmail(
    &amp;quot;to&amp;#64;email.com&amp;quot;, // Update to email
    &amp;quot;Alice in Wonderland&amp;quot;,
    &amp;quot;I thought you might enjoy this book!&amp;quot;,
    &amp;quot;Alice in Wonderland.pdf&amp;quot;,
    buffer
  );
})();
&lt;/code&gt;&lt;/pre&gt;
</content>
	</entry>
	<entry>
		<link href="https://glenhallworth.com/posts/first-post" />
		<id>https://glenhallworth.com/posts/first-post</id>
		<title>First Post</title>
		<updated>2016-01-01T00:00:00Z</updated>
		<content>&lt;p&gt;This is my first post!&lt;/p&gt;
</content>
		<summary>&lt;p&gt;This is my first post!&lt;/p&gt;</summary>
	</entry>
</feed>