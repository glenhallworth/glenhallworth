<?xml version="1.0" encoding="utf-8"?>
<rss xmlns:content="http://purl.org/rss/1.0/modules/content/" version="2.0">
	<channel>
		<title>Glen Hallworth</title>
		<link>https://glenhallworth.com/</link>
		<description>Glen Hallworth</description>
		<copyright>2018</copyright>
		<pubDate>Tue, 06 Nov 2018 03:31:48 GMT</pubDate>
		<lastBuildDate>Tue, 06 Nov 2018 03:31:48 GMT</lastBuildDate>
		<item>
			<title>React Ecosystem is a Minefield</title>
			<link>https://glenhallworth.com/posts/react-ecosystem-is-a-minefield</link>
			<description>&lt;p&gt;This year I have been working on a React project. React as a single page application technology is simple.&lt;/p&gt;</description>
			<guid>https://glenhallworth.com/posts/react-ecosystem-is-a-minefield</guid>
			<pubDate>Tue, 06 Nov 2018 00:00:00 GMT</pubDate>
			<content:encoded>&lt;p&gt;This year I have been working on a React project. React as a single page application technology is simple.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;It's just javascript, including JSX&lt;/li&gt;
&lt;li&gt;Focuses narrowly on the UI layer&lt;/li&gt;
&lt;li&gt;External changes come from props, internal changes from state&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;React is a niche library for building user interfaces. It's good at that, and it's an enjoyable development experience. React encourages you to treat the UI as the rest of your code because it is just javascript. However you don't get batteries included. Single page applications are not just the UI, they usually also involve&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;AJAX&lt;/li&gt;
&lt;li&gt;Forms and validation&lt;/li&gt;
&lt;li&gt;Authentication&lt;/li&gt;
&lt;li&gt;Routing and navigation&lt;/li&gt;
&lt;li&gt;And more...&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;React makes it hard to fall into the &lt;a href="https://blog.codinghorror.com/falling-into-the-pit-of-success/"&gt;Pit of Success&lt;/a&gt;.&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote class="blockquote"&gt;
&lt;p&gt;The Pit of Success: in stark contrast to a summit, a peak, or a journey across a desert to find victory through many trials and surprises, we want our customers to simply fall into winning practices by using our platform and frameworks. To the extent that we make it easy to get into trouble we fail.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;If you require routing in your application, React offers a &lt;a href="https://reactjs.org/community/routing.html"&gt;page with links to 10 different libraries&lt;/a&gt;. If you contrast this to Angular, it &lt;a href="https://angular.io/guide/router"&gt;links to one&lt;/a&gt;, with documentation, examples and supported by the Angular team.&lt;/p&gt;
&lt;p&gt;The result is adding basic functionality into your React app is a mountain climb finding the right library for the job. There's quite a lot of work that goes into evaluating libraries.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;When was the last release? How often are new versions released?&lt;/li&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/Bus_factor"&gt;Bus factor&lt;/a&gt; - How many contributors. Does a major company support it.&lt;/li&gt;
&lt;li&gt;Documentation&lt;/li&gt;
&lt;li&gt;Examples&lt;/li&gt;
&lt;li&gt;If I have a problem, question or need help can I get it? Github issues? StackOverflow? Blog posts?&lt;/li&gt;
&lt;li&gt;Tests - I don't want regressions on new versions.&lt;/li&gt;
&lt;li&gt;Downloads on NPM&lt;/li&gt;
&lt;li&gt;Github stars&lt;/li&gt;
&lt;li&gt;Does it support Typescript - Written in typescript, typings included in projects, typings from definitely typed or no support at all?&lt;/li&gt;
&lt;li&gt;Spiking out a prototype&lt;/li&gt;
&lt;li&gt;And does it solve the problem...&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;You finally choose a library. It solves your problem. Months go by, and you update it occasionally, there's a breaking change you fix. Perhaps it is not as performant as you would like. Perhaps you open Github one day and see this&lt;/p&gt;
&lt;p&gt;&lt;img src="image/React-Ecosystem-is-a-Minefield/deprecated.png" class="img-fluid" alt="" /&gt;&lt;/p&gt;
&lt;p&gt;You curse. Make a mental note of technical debt to pay down. Think of &lt;a href="http://retrospectivewiki.org/index.php?title=The_Prime_Directive"&gt;The Prime Directive&lt;/a&gt;&lt;/p&gt;
&lt;blockquote class="blockquote"&gt;
&lt;p&gt;Regardless of what we discover, we understand and truly believe that everyone did the best job they could, given what they knew at the time, their skills and abilities, the resources available, and the situation at hand.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;It is not easy to build a large, complex single page application in React. It's hard to know if you've made the right choices. Making the wrong ones is easy. There is a lot to consider when building a React-based application. I wish it were safer. It's dangerous in this ecosystem.&lt;/p&gt;
</content:encoded>
		</item>
		<item>
			<title>Using Audiobooks to Keep Up on That Reading List</title>
			<link>https://glenhallworth.com/posts/Using-Audiobooks-to-Keep-Up-on-That-Reading-List</link>
			<description>&lt;p&gt;This year I switched from commuting to work on a train to driving to work. When I was catching the train, I had up 90 minutes to read per day 5 days to a week. Although my commute was shortened driving, I lost this "captive" time which allowed me to read frequently and often.&lt;/p&gt;</description>
			<guid>https://glenhallworth.com/posts/Using-Audiobooks-to-Keep-Up-on-That-Reading-List</guid>
			<pubDate>Mon, 05 Nov 2018 00:00:00 GMT</pubDate>
			<content:encoded>&lt;h1 id="using-audiobooks-to-keep-up-on-that-reading-list"&gt;Using Audiobooks to Keep Up on That Reading List&lt;/h1&gt;
&lt;p&gt;This year I switched from commuting to work on a train to driving to work. When I was catching the train, I had up 90 minutes to read per day 5 days to a week. Although my commute was shortened driving, I lost this &amp;quot;captive&amp;quot; time which allowed me to read frequently and often.&lt;/p&gt;
&lt;p&gt;I started using audiobooks. I could not read while driving, but I could listen to someone read to me. You'll find there are many activities you do when you have free brain cycles to learn. Personally, I have seen my comprehension has not suffered, there is &lt;a href="https://www.thecut.com/2016/08/listening-to-a-book-instead-of-reading-isnt-cheating.html"&gt;evidence&lt;/a&gt; to support this.&lt;/p&gt;
&lt;h2 id="getting-audiobooks"&gt;Getting Audiobooks&lt;/h2&gt;
&lt;p&gt;Audiobooks being inherently digital, I have found there is no desire to collect them. I doubt I would want to listen to them again such as music nor is there a desire to refer to them like a physical book.&lt;/p&gt;
&lt;h3 id="where-is-netflixspotify"&gt;Where Is Netflix/Spotify?&lt;/h3&gt;
&lt;p&gt;Unfortunately, there isn't much choice in the audiobook subscription market which makes it easy to binge listen to audiobooks. Sites like &lt;a href="https://audible.com"&gt;audible.com&lt;/a&gt; give you credit per month to use and a discount on other audiobooks in their catalogue. &lt;a href="https://www.scribd.com"&gt;scribd.com&lt;/a&gt; is a notable exception with an all you can eat model.&lt;/p&gt;
&lt;h3 id="free-as-in-beer"&gt;Free As In Beer&lt;/h3&gt;
&lt;p&gt;Thankfully there are many free resources available. For books in the public domain, many sites cater to making this information accessible such as &lt;a href="https://librivox.org"&gt;librivox.org&lt;/a&gt;, &lt;a href="https://www.learnoutloud.com/Free-Audio-Video"&gt;learnoutloud.com&lt;/a&gt; and &lt;a href="https://archive.org/details/audio_bookspoetry"&gt;Internet Archive&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The most valuable resource though has been my city's library. &lt;a href="https://library.brisbane.qld.gov.au/client/en_AU/eLibCat/?rm=AUDIOBOOKS0%7C%7C%7C1%7C%7C%7C0%7C%7C%7Ctrue"&gt;Brisbane Library&lt;/a&gt; grants access to several audiobook providers, usually via a phone app. The disadvantage is you will sometimes have to put the book on hold and wait your turn to access. It is also a library, so you have a limited timeframe to listen to the book.&lt;/p&gt;
&lt;h2 id="playing-audiobooks"&gt;Playing Audiobooks&lt;/h2&gt;
&lt;p&gt;If the audiobook isn't from one of the apps, I've been using &lt;a href="https://play.google.com/store/apps/details?id=ak.alizandro.smartaudiobookplayer&amp;amp;hl=en_AU"&gt;Smart Audiobook Player&lt;/a&gt; on my phone. The full version is free for the first 30 days. Afterwards, it has reduced functionality. It does not contain ads. It has never had an issue with playing any of the audiobooks I've thrown at it. If I receive a phone call, it stops and resumes where I was when I hang up. The full version is only $2.89, it's such a great app you want to buy it.&lt;/p&gt;
&lt;p&gt;As my phone is my player, I have it always available. At my desk, noise cancelling bluetooth headphones are a great way to block out the noise and concentrate on your work while listening to an audiobook. While driving my phone is connected to my car stereo, and I listen to a book instead of the radio.&lt;/p&gt;
&lt;p&gt;Happy &lt;del&gt;Reading&lt;/del&gt; Listening!&lt;/p&gt;
</content:encoded>
		</item>
		<item>
			<title>From the Trenches - 5 Lessons of a Successful Project</title>
			<link>https://glenhallworth.com/posts/From-The-Trenches-5-Lessions-of-a-Successful-Project</link>
			<description>&lt;p&gt;I have been working on building an enterprise application to replace Access databases, Excel and much paper. The organisation is well entrenched in their processes, using this system for several years. They had outgrown their current systems, limiting their ability to innovate and join the digital revolution. I joined after a previous team had tried and failed to replace the system, costing the company money in the process. These are just five lessons that helped us succeed.&lt;/p&gt;</description>
			<guid>https://glenhallworth.com/posts/From-The-Trenches-5-Lessions-of-a-Successful-Project</guid>
			<pubDate>Sat, 29 Sep 2018 00:00:00 GMT</pubDate>
			<content:encoded>&lt;p&gt;I have been working on building an enterprise application to replace Access databases, Excel and much paper. The organisation is well entrenched in their processes, using this system for several years. They had outgrown their current systems, limiting their ability to innovate and join the digital revolution. I joined after a previous team had tried and failed to replace the system, costing the company money in the process. These are just five lessons that helped us succeed.&lt;/p&gt;
&lt;h2 id="coaching-agile"&gt;Coaching Agile&lt;/h2&gt;
&lt;p&gt;It is easy to forget after years of being agile in software development that most organisations and most departments outside of I.T. are not familiar with agile practices. It takes time to learn. There are new ideas and ceremonies to understand. Given this is a large project with multiple subdomains and product owners, within addition several stakeholders there were quite a few people to bring along to the journey.&lt;/p&gt;
&lt;p&gt;During the development, when adding further subdomains into the project we were essentially starting over the agile journey with new stakeholders and product owners. The whole project we've been starting from zero, it's been important to challenge our assumptions constantly and educate our colleagues in our way of working. Coming in after a failed project, coaching agile to stakeholders has increased their confidence in us and further ensures the success of the project.&lt;/p&gt;
&lt;h2 id="get-the-architecture-right"&gt;Get the Architecture Right&lt;/h2&gt;
&lt;p&gt;In a complex enterprise system of this size and project length the ability to change and to reason overtime is required to deliver and adapt. From the start, we've implemented &lt;a href="http://dddcommunity.org/learning-ddd/what_is_ddd/"&gt;Domain-Driven Design&lt;/a&gt; to inform our model and tame complexity in the monolith. We've also used &lt;a href="https://docs.microsoft.com/en-us/azure/architecture/patterns/cqrs"&gt;CQRS&lt;/a&gt; to separate our writes and reads, simplifying our software.&lt;/p&gt;
&lt;p&gt;The right architecture flows throughout the whole project. It allows you to understand how the domain works, to add new features quickly and test your code effectively. Preventing the system from going to spaghetti expands the useful lifespan of the application. It allows you to iterate towards an application fit for purpose.&lt;/p&gt;
&lt;h2 id="just-enough-testing"&gt;Just Enough Testing&lt;/h2&gt;
&lt;p&gt;In the long run, adequate testing saves time, preventing defects and reducing risk making changes. There are many different types of testing and testing strategies. We decided to maximise the bang for our buck using two kinds of testing.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Integration Testing&lt;/strong&gt; - Performing subcutaneous tests by calling the API, executing a command, saving to the database and verifying the results through calling the API, running a query and reading the database provides a good level of confidence the system works. Using the system to test the system limits the number of tests you need to write to ensure correctness.&lt;/p&gt;
&lt;p&gt;There are tradeoffs to integration testing. They are typically slower than unit tests. However, with the right architecture and picking the most valuable slice of application to test you prevent significant problems in your application.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Convention Testing&lt;/strong&gt; - Enforcing agreed upon standards across the project and preventing developers from making mistakes. Convention tests address specific types of &lt;a href="/How-To-Automate-Your-Code-Nazi"&gt;issues&lt;/a&gt; traditional testing does not pick up. They provide enormous value for little effort in writing testing your whole code base for problems.&lt;/p&gt;
&lt;p&gt;These were not the only types of testing we performed. The critical idea was focusing on tests that maximised value for minimal effort.&lt;/p&gt;
&lt;h2 id="be-pragmatic"&gt;Be Pragmatic&lt;/h2&gt;
&lt;p&gt;In all projects, including large projects such as this one, you need to make pragmatic decisions. There are competing stories, bugs and technical debt to pay down to prioritise. You need to take a practical approach and be pragmatic to the priorities.&lt;/p&gt;
&lt;p&gt;Although the vast majority of choices we made with third-party libraries were correct, we made mistakes. The forms library worked well 90% of the time. It did not have great integration with our language choice and in specific scenarios performance was terrible. Midway through the project the maintainers deprecated the library and started a new library. It is significant work to replace the library, but that would be a distraction, the library still works, we can work around the 10% of issues. We are making pragmatic decision to take on technical debt and focus on what is more important.&lt;/p&gt;
&lt;h2 id="deliver"&gt;Deliver&lt;/h2&gt;
&lt;p&gt;Building trust with organisation and stakeholders was necessary, we were coming in after a failed project. We were agile. They were a traditional organisation. It was reasonable for them to be sceptical of us. To achieve the goals of the project and overcome trust chasm we delivered.&lt;/p&gt;
&lt;p&gt;We built a minimum-viable product, we had users, using the software in production as soon as we could.&lt;/p&gt;
&lt;p&gt;We frequently deployed, without breaking changes, often. Soon after demonstrating features, our users could use them, in production, for real.&lt;/p&gt;
&lt;p&gt;When we received feedback, we took it on board, investigated the underlying problem and came up with a solution. If it did not work, we iterated until we found a suitable solution.&lt;/p&gt;
&lt;p&gt;Over time we gained the trust of the organisation by delivering. It is satisfying to have someone in the organisation to sell the project to their colleagues, to explain the benefits without being prompted. Delivery is achieving success.&lt;/p&gt;
</content:encoded>
		</item>
		<item>
			<title>Extracting Images from PDF File For Free</title>
			<link>https://glenhallworth.com/posts/Extracting-Images-from-PDF-File-For-Free</link>
			<description>&lt;p&gt;Had this problem a while back when I needed a logo SVG in a PDF brand guidelines document. I ended up asking one of the UX designers who had a Adobe Creative Cloud subscription. This is how to extract it for free on your own.&lt;/p&gt;</description>
			<guid>https://glenhallworth.com/posts/Extracting-Images-from-PDF-File-For-Free</guid>
			<pubDate>Tue, 04 Sep 2018 00:00:00 GMT</pubDate>
			<content:encoded>&lt;p&gt;Had this problem a while back when I needed a logo SVG in a PDF brand guidelines document. I ended up asking one of the UX designers who had a Adobe Creative Cloud subscription. This is how to extract it for free on your own.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Install &lt;a href="https://inkscape.org"&gt;Inkscape&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Open the PDF file and select the page the image is on&lt;/li&gt;
&lt;li&gt;Select the image and copy&lt;/li&gt;
&lt;li&gt;Open a new Inkscape page, paste the image&lt;/li&gt;
&lt;li&gt;Edit -&amp;gt; Resize Page to Select or Shift + Ctrl + R&lt;/li&gt;
&lt;li&gt;Save (dat money)&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src="images/Extracting-Images-from-PDF-File-For-Free/savedatmoney.gif" class="img-fluid" alt="savedatmoney" /&gt;&lt;/p&gt;
</content:encoded>
		</item>
		<item>
			<title>Using Sass with RazorLight</title>
			<link>https://glenhallworth.com/posts/Using-Sass-with-RazorLight</link>
			<description>&lt;p&gt;I've been using &lt;a href="https://github.com/toddams/RazorLight"&gt;RazorLight&lt;/a&gt; to generate HTML for PDF reports. It works pretty well supporting .NET Standard 2.0.&lt;/p&gt;</description>
			<guid>https://glenhallworth.com/posts/Using-Sass-with-RazorLight</guid>
			<pubDate>Tue, 04 Sep 2018 00:00:00 GMT</pubDate>
			<content:encoded>&lt;h1 id="using-sass-with-razorlight"&gt;Using Sass with RazorLight&lt;/h1&gt;
&lt;p&gt;I've been using &lt;a href="https://github.com/toddams/RazorLight"&gt;RazorLight&lt;/a&gt; to generate HTML for PDF reports. It works pretty well supporting .NET Standard 2.0.&lt;/p&gt;
&lt;p&gt;One of the problems I had was styling these reports. I did not want to just use CSS, I wanted to use &lt;a href="https://sass-lang.com/"&gt;Sass&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id="transpiling-sass-to-css"&gt;Transpiling Sass to CSS&lt;/h3&gt;
&lt;p&gt;I don't have that many reports and they do not change very often. I decided to use Visual Studio extension &lt;a href="https://marketplace.visualstudio.com/items?itemName=MadsKristensen.WebCompiler"&gt;Web Compiler&lt;/a&gt;.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;I did not want to add this to the build pipeline&lt;/li&gt;
&lt;li&gt;I don't mind checking in the CSS files&lt;/li&gt;
&lt;li&gt;I don't mind embedding the CSS files&lt;/li&gt;
&lt;li&gt;I can always change it later. Be pragmatic.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I setup the web compiler to compile on save. I also made the CSS output files an embedded resource.&lt;/p&gt;
&lt;h3 id="project-structure"&gt;Project Structure&lt;/h3&gt;
&lt;p&gt;This is how I structured my project.&lt;/p&gt;
&lt;p&gt;&lt;img src="images/Using-Sass-with-RazorLight/projectstructure.PNG" class="img-fluid" alt="" /&gt;&lt;/p&gt;
&lt;p&gt;I have a &lt;em&gt;Templates&lt;/em&gt; folder which contains all the templates (*.cshtml files) and stylesheets under &lt;em&gt;Styles&lt;/em&gt; folder (*.css and *.scss files).&lt;/p&gt;
&lt;p&gt;&lt;em&gt;TheTemplates.cs&lt;/em&gt; is a helper class to make it easy to get a reference to assembly.&lt;/p&gt;
&lt;script src="https://gist.github.com/glenhallworth/d88c655790489ccb7907858ce6346491.js"&gt;&lt;/script&gt;
&lt;h3 id="getting-the-css"&gt;Getting the CSS&lt;/h3&gt;
&lt;p&gt;By using reflection we can read the embedded CSS file as a string.&lt;/p&gt;
&lt;script src="https://gist.github.com/glenhallworth/fe62f24452a9cd842926883b9f42fe30.js"&gt;&lt;/script&gt;
&lt;p&gt;This returns the CSS wrapped &amp;lt;style&amp;gt; tag for use in the RazorLight template.&lt;/p&gt;
&lt;h3 id="embedding-the-stylesheet"&gt;Embedding the stylesheet&lt;/h3&gt;
&lt;p&gt;Finally we can add the stylesheet to our template Report.cshtml using Raw method.&lt;/p&gt;
&lt;script src="https://gist.github.com/glenhallworth/c16b9c2bfc2a7a660202d85685280355.js"&gt;&lt;/script&gt;
</content:encoded>
		</item>
		<item>
			<title>How To Automate Your Code Nazi</title>
			<link>https://glenhallworth.com/posts/How-To-Automate-Your-Code-Nazi</link>
			<description>&lt;p&gt;Do you have a colleague who doesn't follow your naming convention?&lt;/p&gt;</description>
			<guid>https://glenhallworth.com/posts/How-To-Automate-Your-Code-Nazi</guid>
			<pubDate>Mon, 03 Sep 2018 00:00:00 GMT</pubDate>
			<content:encoded>&lt;p&gt;Do you have a colleague who doesn't follow your naming convention?&lt;/p&gt;
&lt;p&gt;Are you sick of pointing out obvious mistakes in pull requests?&lt;/p&gt;
&lt;p&gt;Did you forget to put [Authorize] attribute on the controller and left a security hole in your application?&lt;/p&gt;
&lt;p&gt;Never fear, there is a solution to this problem. You can use convention tests to enforce rules automating your inner code Nazi.&lt;/p&gt;
&lt;h3 id="the-problem"&gt;The Problem&lt;/h3&gt;
&lt;p&gt;The project was using a variety of collection types in DTO properties. It was a real mix bag, including IEnumerable, ICollection and Arrays. There were some concerns the team had.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The lack of consistency, you had to look at what the return type was. Also when writing new queries, the developers had to think about what type they would use.&lt;/li&gt;
&lt;li&gt;The immutability of data structures.&lt;/li&gt;
&lt;li&gt;Concerns about lazy evaluation and desire to guarantee to consumers the collection had been iterated. &lt;a id="fnref:1" href="#fn:1" class="footnote-ref"&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The team decided to use IReadOnlyCollection everywhere we needed a collection.&lt;/p&gt;
&lt;h3 id="the-solution"&gt;The Solution&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/andrewabest/Conventional"&gt;Conventional&lt;/a&gt; is a library to help writing convention tests. It includes a lot of common scenarios. You can also write your own, which we will do here.&lt;/p&gt;
&lt;p&gt;To create a convention specification, inherit from ConventionSpecification and override IsSatisfiedBy method.&lt;/p&gt;
&lt;p&gt;This code relies heavily on reflection to examine the underlying types to determine whether the property is a collection and that collection is using IReadOnlyCollection.&lt;/p&gt;
&lt;script src="https://gist.github.com/glenhallworth/583bc0f55ac159b2daeaf91586b6447e.js"&gt;&lt;/script&gt;
&lt;p&gt;The project used &lt;a href="https://github.com/jbogard/MediatR"&gt;MediatR&lt;/a&gt; for all commands and queries. Meaning all queries implement IRequest&amp;lt;&amp;gt; interface. With assembly scanning it is easy to find all these queries.&lt;/p&gt;
&lt;script src="https://gist.github.com/glenhallworth/9ba8e7d7d28068522540daed1f9b1f7a.js"&gt;&lt;/script&gt;
&lt;p&gt;What this code does is&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Find all the return types of queries - that is the &lt;em&gt;T&lt;/em&gt; in IRequest&lt;T&gt;&lt;/li&gt;
&lt;li&gt;Get all the property types of &lt;em&gt;T&lt;/em&gt; recursively.&lt;/li&gt;
&lt;li&gt;Ensure these types conform to the convention specification DtosMustUseIReadOnlyCollectionForEnumerablesConventionSpecification&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id="wrap-up"&gt;Wrap Up&lt;/h3&gt;
&lt;p&gt;By writing a convention test, we solved the problem we had. We also&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Made it easy to refactor by finding all the places that weren't using IReadOnlyCollection&lt;/li&gt;
&lt;li&gt;Guaranteed we couldn't accidentally reintroduce the problem by having a convention test as part of our test suite&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Convention tests are a great way to prevent mistakes and to ensure greater consistency in your codebase. Plus that inner code Nazi will be less annoying to your team.&lt;/p&gt;
&lt;div class="footnotes"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn:1"&gt;
&lt;p&gt;&lt;a href="https://blogs.msdn.microsoft.com/ericwhite/2006/10/04/lazy-evaluation-and-in-contrast-eager-evaluation/"&gt;https://blogs.msdn.microsoft.com/ericwhite/2006/10/04/lazy-evaluation-and-in-contrast-eager-evaluation/&lt;/a&gt;&lt;a href="#fnref:1" class="footnote-back-ref"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</content:encoded>
		</item>
		<item>
			<title>Home Automation - Lighting</title>
			<link>https://glenhallworth.com/posts/Home-Automation-Lighting</link>
			<description>&lt;p&gt;Lighting is a practical first step into the area of home automation. I went with &lt;a href="https://www2.meethue.com/en-us"&gt;Philips Hue&lt;/a&gt; for two main reasons:&lt;/p&gt;</description>
			<guid>https://glenhallworth.com/posts/Home-Automation-Lighting</guid>
			<pubDate>Tue, 03 Jul 2018 00:00:00 GMT</pubDate>
			<content:encoded>&lt;p&gt;Lighting is a practical first step into the area of home automation. I went with &lt;a href="https://www2.meethue.com/en-us"&gt;Philips Hue&lt;/a&gt; for two main reasons:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;It's been around for a while, first released in 2012 and currently on the third generation.&lt;/li&gt;
&lt;li&gt;It has a lot of third party integration and includes a REST API to program if need be.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="setup"&gt;Setup&lt;/h2&gt;
&lt;p&gt;Setup is simple. Plug in the Philips Hue Bridge. I put mine next to my WiFi router. Screw out your old light bulbs and replace with Philips Hue bulbs. Download the app on your phone, register and setup the lights.&lt;/p&gt;
&lt;p&gt;In about an hour, I could now turn my lights on or off, adjust the brightness or colour anywhere in the world from my phone.&lt;/p&gt;
&lt;p&gt;I put the colour bulb in the lounge room, where I spend most of my time at home. I put white bulbs in the bedroom, hallway and dining room. Due to the expense of the bulbs, I limited it to areas I frequent. The guest bedroom does not need a smart light bulb, nor the toilet. The kitchen light requires three light bulbs. It is left on when we are home at night and turned off when we go to bed. As these other bulbs fail, they will be replaced with a smart bulb.&lt;/p&gt;
&lt;h2 id="the-problem"&gt;The Problem&lt;/h2&gt;
&lt;p&gt;To turn lights on and off from my phone, the light switch always had to be on. If I used the light switch to turn off the lights, I could not turn on my smart lights remotely and I had a boondoggle. This required&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;My phone to be within reach at all times&lt;/li&gt;
&lt;li&gt;My phone to have battery power&lt;/li&gt;
&lt;li&gt;I'm the only one who uses the lights (unless I go through the process of setting it up on their phone)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Philips Hue has a dimmer switch you can buy to help with this problem. I didn't want to use it. I wanted to be smarter with my lights beyond having a remote control.&lt;/p&gt;
&lt;h2 id="google-home"&gt;Google Home&lt;/h2&gt;
&lt;p&gt;I bought a &lt;a href="https://store.google.com/product/google_home"&gt;Google Home&lt;/a&gt; for the living area and Google Home Mini for the bedroom. I chose Google Homes' as I already had an Android phone and a Chromecast.&lt;/p&gt;
&lt;p&gt;It was simple to setup, using Google Home to connect to Philips Hue lights. I could now turn my lights on or off with voice commands.&lt;/p&gt;
&lt;p&gt;&amp;quot;Hey Google turn on lights&amp;quot; - Turns on all lights.&lt;/p&gt;
&lt;p&gt;&amp;quot;Hey Google turn off light in the bedroom&amp;quot; - Turns the bedroom light off.&lt;/p&gt;
&lt;p&gt;&amp;quot;Hey Google make the lounge room light blue&amp;quot; - Changes the lounge room light to blue.&lt;/p&gt;
&lt;p&gt;I was no longer relying on my phone to control my lighting. Other people or guests in the house could control the lights. Some commands are easier via voice. Changing the colour is easier saying the colour than finding the right colour in the Philips Hue App. It's fun to yell at inanimate objects and have magic occur.&lt;/p&gt;
&lt;h3 id="other-uses"&gt;Other Uses&lt;/h3&gt;
&lt;p&gt;I soon discovered there were few other devices I had which I could control from Google Home.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href="https://www.spotify.com/au/"&gt;Spotify&lt;/a&gt;&lt;/strong&gt; - Google Home is a speaker, I connected it to my Spotify account. It is the most straightforward music player I've had.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href="https://store.google.com/product/chromecast_2015"&gt;Google Chromecast&lt;/a&gt;&lt;/strong&gt; - The primary use is for pausing and playing shows I'm currently streaming. &amp;quot;Hey Google play Stranger Things on Netflix&amp;quot; is a cool command though.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href="https://www.fetchtv.com.au/"&gt;Fetch TV&lt;/a&gt;&lt;/strong&gt; - This came with my internet connection. It's handy to record shows, and pause/rewind live television. With Google Home it's easy to change the channel if you've lost your remote control.&lt;/p&gt;
&lt;h2 id="pranks-and-issues"&gt;Pranks and Issues&lt;/h2&gt;
&lt;p&gt;There were unintended consequences to new technology. My girlfriend soon figured out you could tell the lounge room speaker to play music on the bedroom speaker while I was sleeping. Similarly, if she is watching Netflix too loud, I can stop it from the bedroom.&lt;/p&gt;
&lt;p&gt;If you don't have a family Spotify account, the music you are listening to work is stopped.&lt;/p&gt;
&lt;p&gt;When Google Home had an &lt;a href="https://techcrunch.com/2018/06/27/google-home-and-chromecast-are-down-affecting-users-worldwide/"&gt;outage&lt;/a&gt;, I went back to using my light switch.&lt;/p&gt;
&lt;h2 id="cost"&gt;Cost&lt;/h2&gt;
&lt;p&gt;I've summarised the expenses to set this up below. Other items (Spotify, Chromecast, Fetch TV) I already had and have excluded. All prices are in Australian Dollars.&lt;/p&gt;
&lt;table class="table"&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Item&lt;/th&gt;
&lt;th&gt;Price&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Philips Hue Starter Kit (comes with 2 white bulbs)&lt;/td&gt;
&lt;td&gt;$143.00&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Philips Hue Colour Bulb&lt;/td&gt;
&lt;td&gt;$81.39&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Philips Hue White Ambiance Bulb&lt;/td&gt;
&lt;td&gt;$49.95&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Google Home&lt;/td&gt;
&lt;td&gt;$139.00&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Google Home Mini&lt;/td&gt;
&lt;td&gt;$49.00&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Total&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;$462.34&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Happy automating!&lt;/p&gt;
</content:encoded>
		</item>
		<item>
			<title>appsettings.json in .NET Core Console Apps</title>
			<link>https://glenhallworth.com/posts/appsettings-in-dotnet-core-console-app</link>
			<description>&lt;p&gt;When creating a .NET Core console application, it's handy to have Web API style appsettings.json to configure the application.&lt;/p&gt;</description>
			<guid>https://glenhallworth.com/posts/appsettings-in-dotnet-core-console-app</guid>
			<pubDate>Tue, 03 Jul 2018 00:00:00 GMT</pubDate>
			<content:encoded>&lt;p&gt;When creating a .NET Core console application, it's handy to have Web API style appsettings.json to configure the application.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-json"&gt;{
  &amp;quot;AppConfig&amp;quot;: {
    &amp;quot;DatabaseConnectionString&amp;quot;:
      &amp;quot;Data source=(LocalDb)\\MSSQLLocalDB;Initial Catalog=Dev;Integrated Security=True&amp;quot;
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;It would be nice to bind this to a concrete class.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;    class AppConfig
    {
        public string DatabaseConnectionString { get; set; }
    }
&lt;/code&gt;&lt;/pre&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Install NuGet packages&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Microsoft.Extensions.Configuration&lt;/li&gt;
&lt;li&gt;Microsoft.Extensions.Configuration.Binder&lt;/li&gt;
&lt;li&gt;Microsoft.Extensions.Configuration.Json&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Add an extension method to IConfiguration&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;public static class ConfigurationExtensions
    {
        public static T ParseAs&amp;lt;T&amp;gt;(this IConfiguration configuration, string path)
            where T : new()
        {
            var result = new T();
            configuration.GetSection(path).Bind(result);
            return result;
        }
    }
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Use the configuration in your program&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;    class Program
    {
        static void Main(string[] args)
        {
            var configuration = GetStandardConfigurationBuilder();
            var appConfig = configuration.ParseAs&amp;lt;AppConfig&amp;gt;(&amp;quot;AppConfig&amp;quot;);
            Console.WriteLine(appConfig.DatabaseConnectionString);
        }

        internal static IConfiguration GetStandardConfigurationBuilder()
        {
            return new ConfigurationBuilder()
                .AddJsonFile(&amp;quot;appsettings.json&amp;quot;).Build();
        }
    }
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ol&gt;
</content:encoded>
		</item>
		<item>
			<title>Windows Service in 2018</title>
			<link>https://glenhallworth.com/posts/Windows-Service-in-2018</link>
			<description>&lt;p&gt;Most people don't write Windows services anymore. We have the cloud. You can write WebJobs or Functions instead. However in the rare case you have to, say a client with an on-premise server room because their internet connection is awful and a need for background jobs, then this is how I did it.&lt;/p&gt;</description>
			<guid>https://glenhallworth.com/posts/Windows-Service-in-2018</guid>
			<pubDate>Mon, 02 Jul 2018 00:00:00 GMT</pubDate>
			<content:encoded>&lt;h1 id="windows-service-in-2018"&gt;Windows Service in 2018&lt;/h1&gt;
&lt;p&gt;Most people don't write Windows services anymore. We have the cloud. You can write WebJobs or Functions instead. However in the rare case you have to, say a client with an on-premise server room because their internet connection is awful and a need for background jobs, then this is how I did it.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://topshelf-project.com/"&gt;Topshelf&lt;/a&gt; - To manage the windows service and simplify development.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/fluentscheduler/FluentScheduler"&gt;FluentScheduler&lt;/a&gt; - To schedule jobs.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.thepollyproject.org/"&gt;Polly&lt;/a&gt; - To add resilience and fault handling.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://autofac.org/"&gt;Autofac&lt;/a&gt; - To glue everything together with dependency injection.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://serilog.net/"&gt;Serilog&lt;/a&gt; and &lt;a href="https://getseq.net/"&gt;Seq&lt;/a&gt; - For logging and debugging.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/glenhallworth/WindowsService"&gt;TLDR: Show me the code&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="topshelf"&gt;Topshelf&lt;/h2&gt;
&lt;p&gt;Topshelf makes developing Windows services easy. You develop a console app which you can install as a Windows service. By making testing in development as simple as running a console app, you significantly reduce the feedback loop and ease of development.&lt;/p&gt;
&lt;p&gt;The one caveat is it doesn't support .NET Core yet. There is a develop branch with support. I wouldn't run critical production apps off of it yet. Nevertheless, it should be simple to switch once it does by upgrading the Nuget package and changing the target framework from full framework to .NET Core.&lt;/p&gt;
&lt;h2 id="fluentscheduler"&gt;FluentScheduler&lt;/h2&gt;
&lt;p&gt;I've avoided creating multiple windows services (and thereby many deployment artefacts) by using FluentScheduler.&lt;/p&gt;
&lt;p&gt;You create a job by implementing the IJob interface. Here's a simple job:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;    public class TimerJob : IJob
    {
        public void Execute()
        {
            var timer = new System.Timers.Timer(1000) { AutoReset = true };
            timer.Elapsed += (sender, eventArgs) =&amp;gt; Console.WriteLine(&amp;quot;It is {0} and all is well&amp;quot;, DateTime.Now);
            timer.Start();;
        }
    }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You then registry the job by inheriting from Registry class:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt; class TimerRegistry : Registry
    {
        public TimerRegistry(TimerJob job, AppConfig appConfig)
        {
            if (appConfig.RunTimerJob)
            {
                Schedule(job).WithName(job.GetType().FullName).ToRunNow();
            }
        }
    }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The above job runs when the service starts. You can configure when the job runs with a fluent builder. Here's a job that runs every day at 4 AM.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;Schedule(job).WithName(job.GetType().FullName).ToRunEvery(1).Days().At(4, 0);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I'm using one registry class per job to keep it clean and separated.&lt;/p&gt;
&lt;h2 id="polly"&gt;Polly&lt;/h2&gt;
&lt;p&gt;In the real world, errors happen, HTTP calls fail, and you want to handle that. Polly adds a level of resilience allowing retry strategies if failures occur.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;private async Task ExecuteAsync()
        {
            var policyResult = await Policy
                .Handle&amp;lt;Exception&amp;gt;()
                .RetryAsync(3)
                .ExecuteAndCaptureAsync(async () =&amp;gt;
                {
                    _logger.Information(&amp;quot;Attempting to retrieve&amp;quot;);
                    return await DoThing();
                });

            if (policyResult.Outcome == OutcomeType.Failure)
            {
                _logger.Error(policyResult.FinalException, &amp;quot;Could not retrieve status&amp;quot;);
                return;
            }

            var response = policyResult.Result;
            _logger.Information($&amp;quot;Status is {response}&amp;quot;);
        }
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id="autofac"&gt;Autofac&lt;/h2&gt;
&lt;p&gt;I've chosen Autofac for dependency injection. You could use any DI framework. Using assembly scanning I registry all the Jobs and Registries.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;            builder.RegisterAssemblyTypes(TheBackgroundWorker.Assembly)
                .Where(t =&amp;gt; t.IsAssignableTo&amp;lt;IJob&amp;gt;()).AsSelf();

            builder.RegisterAssemblyTypes(TheBackgroundWorker.Assembly)
                .Where(t =&amp;gt; t.IsSubclassOf(typeof(Registry))).As&amp;lt;Registry&amp;gt;();
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The registry objects injected into BackgroundWorkers which configure FluentScheduler's JobManager.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt; public class BackgroundWorkers
    {
        private readonly IEnumerable&amp;lt;Registry&amp;gt; _registries;

        public BackgroundWorkers(IEnumerable&amp;lt;Registry&amp;gt; registries, ILogger logger)
        {
            _registries = registries;
            JobManager.JobStart += info =&amp;gt; logger.Information($&amp;quot;Scheduled job {info.Name} started&amp;quot;);
            JobManager.JobEnd += info =&amp;gt; logger.Information($&amp;quot;Scheduled job {info.Name} finished&amp;quot;);
            JobManager.JobException += info =&amp;gt;
                logger.Error(info.Exception, $&amp;quot;An error occurred on scheduled job {info.Name}&amp;quot;);
        }

        public void Start()
        {
            JobManager.Initialize(_registries.ToArray());
        }

        public void Stop()
        {
            JobManager.Stop();
        }
    }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Finally BackgroundWorkers in called by Topshelf when the service is started and stopped.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;		   var backgroundWorkers = container.Resolve&amp;lt;BackgroundWorkers&amp;gt;();
            var rc = HostFactory.Run(x =&amp;gt;
            {
                x.Service&amp;lt;BackgroundWorkers&amp;gt;(s =&amp;gt;
                {
                    s.ConstructUsing(name =&amp;gt; backgroundWorkers);
                    s.WhenStarted(tc =&amp;gt; tc.Start());
                    s.WhenStopped(tc =&amp;gt; tc.Stop());
                });
            });
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id="summary"&gt;Summary&lt;/h2&gt;
&lt;p&gt;I have a Windows service that is easy to develop, easy to deploy and easy to add additional jobs to which can be scheduled as required and can be resilient to faults. It is an easy upgrade to .NET Core once Topshelf releases .NET Core version (you can try the preview now). All the sample code which ties all these excellent packages together found at &lt;a href="https://github.com/glenhallworth/WindowsService."&gt;https://github.com/glenhallworth/WindowsService.&lt;/a&gt;&lt;/p&gt;
</content:encoded>
		</item>
		<item>
			<title>Downloading and Opening PDF File in Angular Cordova Project</title>
			<link>https://glenhallworth.com/posts/Downloading-And-Opening-PDF-File-With-Cordova</link>
			<description>&lt;p&gt;Rough sample code with opening a PDF file (or any file really) using Cordova.&lt;/p&gt;</description>
			<guid>https://glenhallworth.com/posts/Downloading-And-Opening-PDF-File-With-Cordova</guid>
			<pubDate>Sat, 27 Jan 2018 00:00:00 GMT</pubDate>
			<content:encoded>&lt;p&gt;Rough sample code with opening a PDF file (or any file really) using Cordova.&lt;/p&gt;
&lt;h3 id="plugins"&gt;Plugins&lt;/h3&gt;
&lt;p&gt;This code uses plugins &lt;a href="https://github.com/pwlin/cordova-plugin-file-opener2"&gt;fileOpener2&lt;/a&gt; and &lt;a href="https://github.com/apache/cordova-plugin-file-transfer"&gt;FileTranser&lt;/a&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-Typescript"&gt;import { Injectable } from '&amp;#64;angular/core';
import { AuthService } from './auth.service';

declare var FileTransfer: any;

class CallbackToPromise&amp;lt;T&amp;gt; {
    promise: Promise&amp;lt;T&amp;gt;;
    doResolve: (T) =&amp;gt; void;
    doReject: (any?) =&amp;gt; void;
    constructor() {
        this.promise = new Promise&amp;lt;T&amp;gt;((doResolve, doReject) =&amp;gt; {
            this.doResolve = doResolve;
            this.doReject = doReject;
        });
    }
}

&amp;#64;Injectable()
export class DocumentService {
  constructor(private authService: AuthService) {
  }

  downloadDocumentCordova(url: string, fileName: string): Promise&amp;lt;void&amp;gt; {

    const callbackToPromise = new CallbackToPromise&amp;lt;void&amp;gt;();
    const fileTransfer = new FileTransfer();
    const uri = encodeURI(url);
    const fileURL = this.replaceWhitespaceWithUnderscore(window['cordova'].file.dataDirectory + fileName);
    console.log('Starting file download: ' + fileURL);
    fileTransfer.download(
      uri,
      fileURL,
      (entry) =&amp;gt; {
        console.log('File download complete: ' + entry.toURL());
        this.openDocumentCordova(entry.toURL());
        callbackToPromise.doResolve(null);
      },
      (error) =&amp;gt; {
        console.log(`Error occurred downloading file. Code: ${error.code} Source: ${error.source} Target: ${error.target}`);
        callbackToPromise.doReject(error);
      },
      false,
      {
        headers: {
          'Authorization': `Bearer ${this.authService.token}`
        }
      }
    );
    return callbackToPromise.promise;
  }

  private replaceWhitespaceWithUnderscore(str: string) {
    return str.replace(/\s/g, '_', ); // iOS does not like spaces in filenames
  }

  private openDocumentCordova(file: string) {
    window['cordova'].plugins.fileOpener2.open(
      file,
      'application/pdf',
      {
        error: (err) =&amp;gt; {
          console.log('Error opening file. Error status: ' + err.status + ' - Error message: ' + err.message);
        },
        success: () =&amp;gt; {
          console.log('File opened successfully');
        }
      }
    );
  }
}

&lt;/code&gt;&lt;/pre&gt;
</content:encoded>
		</item>
		<item>
			<title>Telerik AppBuilder Alternatives</title>
			<link>https://glenhallworth.com/posts/Telerik-AppBuilder-Alternatives</link>
			<description>&lt;p&gt;&lt;a href="https://docs.telerik.com/platform/appbuilder/"&gt;Telerik AppBuilder&lt;/a&gt; is being &lt;a href="https://www.telerik.com/platform-next-level"&gt;retired on 10th May, 2018.&lt;/a&gt; It was an easy way to compile Cordova apps for iOS and Android packages without a Mac OS machine. With the Visual Studio plugin, AppBuilder provided a low-friction way to build cross-platform apps. A new platform is required to continue creating these apps due to the impending retirement. We need a tool that allows developers to initiate a build on a windows machine and receive an iOS package in return.&lt;/p&gt;</description>
			<guid>https://glenhallworth.com/posts/Telerik-AppBuilder-Alternatives</guid>
			<pubDate>Thu, 21 Dec 2017 00:00:00 GMT</pubDate>
			<content:encoded>&lt;p&gt;&lt;a href="https://docs.telerik.com/platform/appbuilder/"&gt;Telerik AppBuilder&lt;/a&gt; is being &lt;a href="https://www.telerik.com/platform-next-level"&gt;retired on 10th May, 2018.&lt;/a&gt; It was an easy way to compile Cordova apps for iOS and Android packages without a Mac OS machine. With the Visual Studio plugin, AppBuilder provided a low-friction way to build cross-platform apps. A new platform is required to continue creating these apps due to the impending retirement. We need a tool that allows developers to initiate a build on a windows machine and receive an iOS package in return.&lt;/p&gt;
&lt;h2 id="convert-to-cordova"&gt;Convert to Cordova&lt;/h2&gt;
&lt;p&gt;Telerik AppBuilder based on &lt;a href="https://cordova.apache.org/"&gt;Cordova&lt;/a&gt;, the first step to moving away from AppBuilder will be converting the project into a Cordova project. There will be minimal work to move plugins and platforms over, although Cordova is strict with the &lt;a href="https://cordova.apache.org/docs/en/latest/reference/cordova-cli/"&gt;directory structure&lt;/a&gt;. This initial pain will make it easier moving forward if you want to trial different platforms for app build and release.&lt;/p&gt;
&lt;h2 id="platforms"&gt;Platforms&lt;/h2&gt;
&lt;h3 id="adobe-phonegap"&gt;&lt;a href="https://build.phonegap.com/"&gt;Adobe Phonegap&lt;/a&gt;&lt;/h3&gt;
&lt;h4 id="pros"&gt;Pros&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;The &lt;a href="https://phonegap.com/products/#phonegap-cli-section"&gt;CLI&lt;/a&gt; is really nice. To initiate a remote build:&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;phonegap remote install ios
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;The paid plan is $9.99 / month.&lt;/li&gt;
&lt;li&gt;Supports QR Codes in the command line
&lt;img src="https://i.imgur.com/ajpwZlO.png" width="250"&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id="cons"&gt;Cons&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Lackluster &lt;a href="https://phonegap.com/products/#desktop-app-section"&gt;desktop application&lt;/a&gt; without much functionality.&lt;/li&gt;
&lt;li&gt;The free plan is limited to 1 app.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="monaca"&gt;&lt;a href="https://monaca.io/"&gt;Monaca&lt;/a&gt;&lt;/h3&gt;
&lt;h4 id="pros-1"&gt;Pros&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Has support for &lt;a href="https://github.com/monaca/monaca-cli"&gt;CLI&lt;/a&gt; or &lt;a href="https://monaca.io/localkit.html"&gt;Localkit IDE&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Can deploy to &lt;a href="https://hockeyapp.net/"&gt;HockeyApp&lt;/a&gt; or &lt;a href="https://deploygate.com/?locale=en"&gt;DeployGate&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://monaca.io/pricing.html"&gt;$20 / month per developer&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;CLI is easy to use&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;monaca remote build ios
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id="cons-1"&gt;Cons&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Discontinued &lt;a href="https://marketplace.visualstudio.com/items?itemName=MonacaandOnsenUI.MonacaforVisualStudio2015"&gt;Visual Studio 2015 plugin&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;No Visual Studio 2017 plugin.&lt;/li&gt;
&lt;li&gt;Visual Studio Code extension in development but no release date.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="visual-studio-team-services"&gt;&lt;a href="https://www.visualstudio.com/team-services/"&gt;Visual Studio Team Services&lt;/a&gt;&lt;/h3&gt;
&lt;h4 id="pros-2"&gt;Pros&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Supports &lt;a href="https://blogs.msdn.microsoft.com/devops/2017/11/16/cloud-hosted-mac-agents-for-ci-cd-pipelines/"&gt;hosted Mac OS build agents&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;If hosted agents unsuitable can use &lt;a href="https://www.macincloud.com/"&gt;MacinCloud&lt;/a&gt; build agents or private agents on your machines&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Generic build and release support for applications other than iOS or Android apps such as a backend service.&lt;/li&gt;
&lt;li&gt;Full software development suite: Source Control, Project Management, Build &amp;amp; Release, Testing&lt;/li&gt;
&lt;li&gt;Free, but active development will exhaust free build minutes quickly.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id="cons-2"&gt;Cons&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Need to check in to build&lt;/li&gt;
&lt;li&gt;Slow feedback loop&lt;/li&gt;
&lt;li&gt;Need to push app package to a third party for deployment&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="cocoon"&gt;&lt;a href="https://cocoon.io/"&gt;Cocoon&lt;/a&gt;&lt;/h3&gt;
&lt;h4 id="pros-3"&gt;Pros&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Website easy to use with good UX&lt;/li&gt;
&lt;li&gt;Essentially free for development builds&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id="cons-3"&gt;Cons&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Poor deployment and automation support
&lt;ul&gt;
&lt;li&gt;Downloads a zip file with packages.&lt;/li&gt;
&lt;li&gt;No straight to phone option.&lt;/li&gt;
&lt;li&gt;No QR Codes.&lt;/li&gt;
&lt;li&gt;No command line tools&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Adds a &amp;quot;Built with Cocoon&amp;quot; splash screen that you can remove for a one-time fee of $500&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="other-platforms"&gt;Other Platforms&lt;/h2&gt;
&lt;h3 id="ionic"&gt;&lt;a href="https://ionicframework.com/"&gt;Ionic&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Ionic is good for building &lt;a href="https://angular.io/"&gt;Angular&lt;/a&gt; based Cordova apps with cloud-build options. It is not suitable using with existing Telerik AppBuilder app due to being tied closely to the Ionic Framework.&lt;/p&gt;
&lt;h3 id="fastlane"&gt;&lt;a href="https://fastlane.tools/"&gt;Fastlane&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Fastlane does not support windows and is out of the scope of this article.&lt;/p&gt;
</content:encoded>
		</item>
		<item>
			<title>Retrieving Esri/ArcGIS Maps Token in Dotnet Core</title>
			<link>https://glenhallworth.com/posts/Retrieving-EsriArcGIS-Maps-Token-in-Dotnet-Core</link>
			<description>&lt;p&gt;&lt;a href="http://www.esri.com/data/streetmap"&gt;Esri&lt;/a&gt; has a premium service which requires adding a token to REST API requests for services like batch geocoding. The service has a few gotchas. The sample code is:&lt;/p&gt;</description>
			<guid>https://glenhallworth.com/posts/Retrieving-EsriArcGIS-Maps-Token-in-Dotnet-Core</guid>
			<pubDate>Mon, 18 Dec 2017 00:00:00 GMT</pubDate>
			<content:encoded>&lt;p&gt;&lt;a href="http://www.esri.com/data/streetmap"&gt;Esri&lt;/a&gt; has a premium service which requires adding a token to REST API requests for services like batch geocoding. The service has a few gotchas. The sample code is:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;    public class EsriTokenResponse
    {
        [JsonProperty(PropertyName = &amp;quot;access_token&amp;quot;)]
        public string AccessToken { get; set; }
        [JsonProperty(PropertyName = &amp;quot;expires_in&amp;quot;)]
        public int ExpiresInMinutes { get; set; }
    }

    public class EsriClient
    {
        private readonly HttpClient _httpClient;
        private readonly string tokenUrl = &amp;quot;https://www.arcgis.com/sharing/rest/oauth2/token&amp;quot;;
        private readonly string clientId = &amp;quot;add_client_id&amp;quot;; // update
        private readonly string clientSecret = &amp;quot;add_client_secret&amp;quot;; // update
        private readonly string grantType = &amp;quot;client_credentials&amp;quot;;
        private readonly int expirationInMinutes = 120;

        public EsriClient(HttpClient httpClient)
        {
            _httpClient = httpClient;
        }
        public async Task&amp;lt;EsriTokenResponse&amp;gt; GetToken()
        {
            var url =
                $&amp;quot;{tokenUrl}?client_id={clientId}&amp;amp;client_secret={clientSecret}&amp;amp;grant_type={grantType}&amp;amp;expiration={ExpirationInMinutes}&amp;quot;;
            var response = await _httpClient.PostAsync(url, null);
            var result =
                await response.Content.ReadAsStringAsync();
            var token = JsonConvert.DeserializeObject&amp;lt;EsriTokenResponse&amp;gt;(result);
            if (string.IsNullOrWhiteSpace(token.AccessToken)) // Esri does not respect HTTP status codes and will always return 200. It puts errors in the body.
            {
                throw new Exception(&amp;quot;Could not retrieve Esri Token&amp;quot;);
            }
            return token;
        }
    }
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id="gotchas"&gt;Gotchas&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://developers.arcgis.com/documentation/core-concepts/rest-api/"&gt;ArcGIS&lt;/a&gt; has a REST-like API. It doesn't adhere strictly to REST best practices.&lt;/p&gt;
&lt;p&gt;When retrieving the token, I did not expect to put all the parameters into the query string.&lt;/p&gt;
&lt;p&gt;Error handling is more laborious than need be, it always returns HTTP 200 OK. For example, in the case of a bad request, the error details are in the body.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-javascript"&gt;{
    &amp;quot;error&amp;quot;: {
        &amp;quot;code&amp;quot;: 400,
        &amp;quot;error&amp;quot;: &amp;quot;invalid_client_id&amp;quot;,
        &amp;quot;error_description&amp;quot;: &amp;quot;Invalid client_id&amp;quot;,
        &amp;quot;message&amp;quot;: &amp;quot;Invalid client_id&amp;quot;,
        &amp;quot;details&amp;quot;: []
    }
}
&lt;/code&gt;&lt;/pre&gt;
</content:encoded>
		</item>
		<item>
			<title>Dotnet Core Templates To Hit The Ground Running</title>
			<link>https://glenhallworth.com/posts/Dotnet-Core-Templates-To-Hit-The-Ground-Running</link>
			<description>&lt;p&gt;The problem with starting a new project is there is a lot of boilerplate work to get started. You need to setup project structure, source control, build and release pipelines, dependency injection and logging before you write a line of business code. Dotnet Core 2.0 supports custom templates meaningless boilerplate code to hit the ground running.&lt;/p&gt;</description>
			<guid>https://glenhallworth.com/posts/Dotnet-Core-Templates-To-Hit-The-Ground-Running</guid>
			<pubDate>Fri, 17 Nov 2017 00:00:00 GMT</pubDate>
			<content:encoded>&lt;p&gt;The problem with starting a new project is there is a lot of boilerplate work to get started. You need to setup project structure, source control, build and release pipelines, dependency injection and logging before you write a line of business code. Dotnet Core 2.0 supports custom templates meaningless boilerplate code to hit the ground running.&lt;/p&gt;
&lt;p&gt;To test creating custom templates I built one for a common app type - C# Web API backend for a single page application. It can be found &lt;a href="https://github.com/glenhallworth/WebApiWithSpa."&gt;https://github.com/glenhallworth/WebApiWithSpa.&lt;/a&gt; I've made it generic including several libraries setup how I like and have left the flexible pieces to be added; such as authentication.&lt;/p&gt;
&lt;p&gt;The templates are distributed using NuGet so it's incredibly easy to use. To get the above template up and running its just two commands:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Install the template from NuGet: dotnet new -i WebApiWithSpa.Template.CSharp&lt;/li&gt;
&lt;li&gt;Create the project: dotnet new WebApiWithSpa&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;There is not much to the template, the above template only has three parts to it.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;A nuspec file to create a NuGet package.&lt;/li&gt;
&lt;li&gt;A template.json file to config the template.&lt;/li&gt;
&lt;li&gt;The template code files.&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;/
  WebApiWithSpa.nuspec - The nuspec file to pack the NuGet package.
  content/
    .template.config/ - A folder for template configuration.
      template.json - The template configuration.
    WebApiWithSpa/ - The code to use for the project.
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This saves me time setting up new projects as the template has already been setup with all the common aspects for projects of this type. There are always tasks at the beginning of the project which are set and forget - logging being an example.&lt;/p&gt;
&lt;p&gt;The project contains the boilerplate structure of the project:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;Domain Layer&lt;/em&gt; - The core business logic of an application. Includes IQuery and ICommand interfaces to support CQRS pattern.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Web API Layer&lt;/em&gt; - The API of the application. Has a sample Values controller supporting example CRUD operations. Also has logging with Serilog and static file serving is setup.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Code Gen&lt;/em&gt; - A console application to generate typescript interfaces for the API request/response objects. Makes writing the SPA easier by automating the creation of the API contract. This builds every time the Web API layer builds.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Unit Tests&lt;/em&gt; - A project for unit tests as every project should have unit tests.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Furthermore, you can add optional content to the template to support toggling features on or off. As a future enhancement, I'll add optional authentication setup.&lt;/p&gt;
&lt;p&gt;If you create several .NET projects every year you should consider using templates to save yourself time lowering the barrier to beginning a new project. Incredibly useful if you or your company has a standard project structure and preferred toolset. Not only will you make your project setup quicker because it's so easy to share with other people can benefit from your template.&lt;/p&gt;
</content:encoded>
		</item>
		<item>
			<title>How to save a webpage as PDF file and send via email using Puppeteer and Nodemailer.js</title>
			<link>https://glenhallworth.com/posts/How-to-save-a-webpage-as-PDF-file-and-send-via-email-using-Puppeteer-and-Nodemailer.js</link>
			<guid>https://glenhallworth.com/posts/How-to-save-a-webpage-as-PDF-file-and-send-via-email-using-Puppeteer-and-Nodemailer.js</guid>
			<pubDate>Fri, 06 Oct 2017 00:00:00 GMT</pubDate>
			<content:encoded>&lt;pre&gt;&lt;code class="language-javascript"&gt;const puppeteer = require(&amp;quot;puppeteer&amp;quot;);
const nodemailer = require(&amp;quot;nodemailer&amp;quot;);

class Webpage {
  static async generatePDF(url) {
    const browser = await puppeteer.launch({ headless: true }); // Puppeteer can only generate pdf in headless mode.
    const page = await browser.newPage();
    await page.goto(url, {
      waitUntil: &amp;quot;networkidle&amp;quot;,
      networkIdleTimeout: 5000
    }); // Adjust network idle as required.
    const pdfConfig = {
      format: &amp;quot;A4&amp;quot;,
      printBackground: true,
      margin: {
        // Word's default A4 margins
        top: &amp;quot;2.54cm&amp;quot;,
        bottom: &amp;quot;2.54cm&amp;quot;,
        left: &amp;quot;2.54cm&amp;quot;,
        right: &amp;quot;2.54cm&amp;quot;
      }
    };
    await page.emulateMedia(&amp;quot;screen&amp;quot;);
    const pdf = await page.pdf(pdfConfig); // Return the pdf buffer. Useful for saving the file not to disk.

    await browser.close();

    return pdf;
  }
}

class Email {
  static sendEmail(to, subject, text, filename, fileContent) {
    const transporter = nodemailer.createTransport({
      host: &amp;quot;smtp.office365.com&amp;quot;,
      port: 587,
      secureConnection: true, // Used for Office 365
      tls: { ciphers: &amp;quot;SSLv3&amp;quot; }, // Used for Office 365
      auth: {
        user: &amp;quot;user&amp;quot;, // Update username
        pass: &amp;quot;pass&amp;quot; // Update password
      }
    });

    const mailOptions = {
      from: &amp;quot;from&amp;#64;email.com&amp;quot;, // Update from email
      to: to,
      subject: subject,
      text: text,
      attachments: [
        {
          filename: filename,
          content: fileContent
        }
      ]
    };

    transporter.sendMail(mailOptions, (error, info) =&amp;gt; {
      if (error) {
        return console.log(error);
      }

      console.log(&amp;quot;Message sent: %s&amp;quot;, info.messageId);
    });
  }
}

(async () =&amp;gt; {
  const url =
    &amp;quot;https://ia601405.us.archive.org/18/items/alicesadventures19033gut/19033-h/19033-h.htm&amp;quot;;
  const buffer = await Webpage.generatePDF(url);
  Email.sendEmail(
    &amp;quot;to&amp;#64;email.com&amp;quot;, // Update to email
    &amp;quot;Alice in Wonderland&amp;quot;,
    &amp;quot;I thought you might enjoy this book!&amp;quot;,
    &amp;quot;Alice in Wonderland.pdf&amp;quot;,
    buffer
  );
})();
&lt;/code&gt;&lt;/pre&gt;
</content:encoded>
		</item>
		<item>
			<title>How to save a webpage as PDF file using Puppeteer.js</title>
			<link>https://glenhallworth.com/posts/How-to-save-a-webpage-as-PDF-file-using-Puppeteer.js</link>
			<guid>https://glenhallworth.com/posts/How-to-save-a-webpage-as-PDF-file-using-Puppeteer.js</guid>
			<pubDate>Fri, 06 Oct 2017 00:00:00 GMT</pubDate>
			<content:encoded>&lt;pre&gt;&lt;code class="language-javascript"&gt;const puppeteer = require(&amp;quot;puppeteer&amp;quot;);

class Webpage {
  static async generatePDF(url) {
    const browser = await puppeteer.launch({ headless: true }); // Puppeteer can only generate pdf in headless mode.
    const page = await browser.newPage();
    await page.goto(url, {
      waitUntil: &amp;quot;networkidle&amp;quot;,
      networkIdleTimeout: 5000
    }); // Adjust network idle as required.
    const pdfConfig = {
      path: &amp;quot;url.pdf&amp;quot;, // Saves pdf to disk.
      format: &amp;quot;A4&amp;quot;,
      printBackground: true,
      margin: {
        // Word's default A4 margins
        top: &amp;quot;2.54cm&amp;quot;,
        bottom: &amp;quot;2.54cm&amp;quot;,
        left: &amp;quot;2.54cm&amp;quot;,
        right: &amp;quot;2.54cm&amp;quot;
      }
    };
    await page.emulateMedia(&amp;quot;screen&amp;quot;);
    const pdf = await page.pdf(pdfConfig); // Return the pdf buffer. Useful for saving the file not to disk.

    await browser.close();

    return pdf;
  }
}

(async () =&amp;gt; {
  const url =
    &amp;quot;https://ia601405.us.archive.org/18/items/alicesadventures19033gut/19033-h/19033-h.htm&amp;quot;;
  const buffer = await Webpage.generatePDF(url);
})();
&lt;/code&gt;&lt;/pre&gt;
</content:encoded>
		</item>
	</channel>
</rss>